/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Query {
    /// Aggregate fields of the query
    #[serde(
        rename = "aggregates",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aggregates: Option<::std::collections::HashMap<String, crate::Aggregate>>,
    /// Optionally limit the maximum number of rows considered while applying aggregations. This limit does not apply to returned rows.
    #[serde(
        rename = "aggregates_limit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aggregates_limit: Option<i64>,
    /// Fields of the query
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<::std::collections::HashMap<String, crate::Field>>,
    /// Optionally limit the maximum number of returned rows. This limit does not apply to records considered while apply aggregations.
    #[serde(rename = "limit", default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    /// Optionally offset from the Nth result. This applies to both row and aggregation results.
    #[serde(rename = "offset", default, skip_serializing_if = "Option::is_none")]
    pub offset: Option<u64>,
    #[serde(rename = "order_by", default, skip_serializing_if = "Option::is_none")]
    pub order_by: Option<crate::OrderBy>,
    #[serde(rename = "where", skip_serializing_if = "Option::is_none")]
    pub r#where: Option<crate::Expression>,
}

impl Query {
    pub fn new() -> Query {
        Query {
            aggregates: None,
            aggregates_limit: None,
            fields: None,
            limit: None,
            offset: None,
            order_by: None,
            r#where: None,
        }
    }
}
